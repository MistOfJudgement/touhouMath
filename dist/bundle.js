/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Axis.ts":
/*!*********************!*\
  !*** ./src/Axis.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.drawAxis = void 0;\nfunction drawAxis(ctx, x, y, length, xScale = 50, yScale = 50, color = \"black\") {\n    //draw x axis\n    ctx.beginPath();\n    ctx.moveTo(x - length, y);\n    ctx.lineTo(x + length, y);\n    ctx.strokeStyle = color;\n    ctx.stroke();\n    //draw y axis\n    ctx.beginPath();\n    ctx.moveTo(x, y + length);\n    ctx.lineTo(x, y - length);\n    ctx.strokeStyle = color;\n    ctx.stroke();\n    //draw x axis scale from -length to length\n    for (let i = -length / xScale; i < length / xScale; i++) {\n        ctx.beginPath();\n        ctx.moveTo(x + i * xScale, y - 5);\n        ctx.lineTo(x + i * xScale, y + 5);\n        ctx.strokeStyle = color;\n        ctx.stroke();\n        //number\n        ctx.font = \"10px Arial\";\n        ctx.fillText((i * xScale).toString(), x + i * xScale - 5, y + 15);\n    }\n    //draw y axis scale\n    for (let i = -length / yScale; i < length / yScale; i++) {\n        ctx.beginPath();\n        ctx.moveTo(x - 5, y - i * yScale);\n        ctx.lineTo(x + 5, y - i * yScale);\n        ctx.strokeStyle = color;\n        ctx.stroke();\n        //number\n        ctx.font = \"10px Arial\";\n        ctx.fillText((i * yScale).toString(), x - 15, y - i * yScale + 5);\n    }\n}\nexports.drawAxis = drawAxis;\n\n\n//# sourceURL=webpack://touhoumath/./src/Axis.ts?");

/***/ }),

/***/ "./src/BulletPath.ts":
/*!***************************!*\
  !*** ./src/BulletPath.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulletPath = exports.drawPath = void 0;\nconst Game_1 = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\nconst Timer_1 = __webpack_require__(/*! ./Timer */ \"./src/Timer.ts\");\nconst Utils_1 = __webpack_require__(/*! ./Utils */ \"./src/Utils.ts\");\nfunction drawPath(ctx, origin, pathFunc, length = 1000, color = \"black\") {\n    ctx.strokeStyle = 'black';\n    ctx.beginPath();\n    ctx.moveTo(origin.x, origin.y);\n    for (let i = 0; i < length; i += 1) {\n        let bullet = pathFunc(i);\n        ctx.lineTo(origin.x + bullet.x, origin.y + bullet.y);\n    }\n    ctx.stroke();\n}\nexports.drawPath = drawPath;\nclass BulletPath {\n    constructor(origin, pathfunc, color = \"blue\", radius = 5, count = 5, spawnrate = 100) {\n        this.activebullets = []; //bullet times\n        this.timeToLive = 6000;\n        this.origin = origin;\n        this.pathFunction = pathfunc;\n        this.color = color;\n        this.radius = radius;\n        this.count = count;\n        this.spawnTimer = new Timer_1.Timer(spawnrate, () => this.fire(), true);\n    }\n    draw(ctx) {\n        drawPath(ctx, this.origin, this.pathFunction, 1000, this.color);\n        ctx.fillStyle = this.color;\n        for (let i = 0; i < this.activebullets.length; i++) {\n            let bullet = this.bulletAtTime(this.activebullets[i]);\n            ctx.beginPath();\n            ctx.arc(bullet.x, bullet.y, this.radius, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n    }\n    boundsCheck(point, margin = 0) {\n        //Checks if the point is at the edge of the screen with some margin\n        return point.x < Game_1.Game.instance.bounds.x - margin ||\n            point.x > Game_1.Game.instance.bounds.x + Game_1.Game.instance.bounds.width + margin ||\n            point.y < Game_1.Game.instance.bounds.y - margin ||\n            point.y > Game_1.Game.instance.bounds.y + Game_1.Game.instance.bounds.height + margin;\n    }\n    update(dt) {\n        if (this.completed) {\n            Game_1.Game.instance.remove(this);\n            return;\n        }\n        for (let i = 0; i < this.activebullets.length; i++) {\n            this.activebullets[i] += dt;\n            let bullet = this.bulletAtTime(this.activebullets[i]);\n            if (this.activebullets[i] > this.timeToLive) {\n                this.activebullets.splice(i, 1);\n                i--;\n            }\n            else if (this.boundsCheck(bullet, 40)) {\n                this.activebullets.splice(i, 1);\n                i--;\n                //change the time to live to the time it took to get to the edge\n                //TODO i want to set time to live such that it is set initially\n                if (this.timeToLive > this.activebullets[i]) {\n                    this.timeToLive = this.activebullets[i];\n                }\n            }\n            if (this.color == \"blue\") { //friendly bullets collide with enemies\n                for (const enemy of Game_1.Game.instance.enemies) {\n                    if (enemy.collides(bullet)) {\n                        this.activebullets.splice(i, 1);\n                        i--;\n                        Game_1.Game.instance.remove(enemy);\n                    }\n                }\n            }\n            else if (this.color == \"red\") { //enemy bullets collide with player\n                if (Game_1.Game.instance.player.collides(bullet)) {\n                    this.activebullets.splice(i, 1);\n                    i--;\n                    Game_1.Game.instance.timesHit++;\n                }\n            }\n        }\n        this.spawnTimer.update(dt);\n    }\n    fire() {\n        this.activebullets.push(0);\n        this.count--;\n        if (this.count <= 0) {\n            this.spawnTimer.loop = false;\n        }\n    }\n    get completed() {\n        return this.count == 0 && this.activebullets.length == 0;\n    }\n    bulletAtTime(t) {\n        return Utils_1.Vector.add(this.origin, this.pathFunction(t));\n    }\n}\nexports.BulletPath = BulletPath;\n\n\n//# sourceURL=webpack://touhoumath/./src/BulletPath.ts?");

/***/ }),

/***/ "./src/Enemy.ts":
/*!**********************!*\
  !*** ./src/Enemy.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Enemy = void 0;\nconst BulletPath_1 = __webpack_require__(/*! ./BulletPath */ \"./src/BulletPath.ts\");\nconst Game_1 = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\nconst Timer_1 = __webpack_require__(/*! ./Timer */ \"./src/Timer.ts\");\nconst Utils_1 = __webpack_require__(/*! ./Utils */ \"./src/Utils.ts\");\nclass Enemy {\n    constructor(spawn = { x: 0, y: 0 }, width = 30, height = 30, color = \"blue\", speed = 0.15, timeBetweenShots = 1000) {\n        this.position = { x: 0, y: 0 };\n        this.width = 30;\n        this.height = 30;\n        this.color = \"blue\";\n        this.speed = 0.15;\n        this.position = spawn;\n        this.width = width;\n        this.height = height;\n        this.color = color;\n        this.speed = speed;\n        // this.timeBetweenShots = timeBetweenShots;\n        this.shotTimer = new Timer_1.Timer(timeBetweenShots, () => this.fire(), true);\n    }\n    draw(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.position.x - this.width / 2, this.position.y - this.height / 2, this.width, this.height);\n    }\n    update(dt) {\n        //buzzes around randomly for now\n        // this.x += (Math.random() - 0.5) * this.speed * dt;\n        // this.y += (Math.random() - 0.5) * this.speed * dt;\n        this.position = { x: this.position.x + (Math.random() - 0.5) * this.speed * dt,\n            y: this.position.y + (Math.random() - 0.5) * this.speed * dt };\n        this.shotTimer.update(dt);\n    }\n    collides(point) {\n        return point.x > this.position.x - this.width / 2 &&\n            point.x < this.position.x + this.width / 2 &&\n            point.y > this.position.y - this.height / 2 &&\n            point.y < this.position.y + this.height / 2;\n    }\n    fire() {\n        //single aimed shot\n        let player = Game_1.Game.instance.player;\n        let slope = Utils_1.Vector.subtract(player.position, this.position);\n        let angle = Math.atan2(slope.y, slope.x);\n        let bullet = new BulletPath_1.BulletPath(this.position, (t) => {\n            let speed = 0.4;\n            return { x: speed * t * Math.cos(angle), y: speed * t * Math.sin(angle) };\n        }, \"red\", 5, 1, 50);\n        Game_1.Game.instance.spawn(bullet);\n    }\n}\nexports.Enemy = Enemy;\n\n\n//# sourceURL=webpack://touhoumath/./src/Enemy.ts?");

/***/ }),

/***/ "./src/Game.ts":
/*!*********************!*\
  !*** ./src/Game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Game = void 0;\nconst Enemy_1 = __webpack_require__(/*! ./Enemy */ \"./src/Enemy.ts\");\nconst Input_1 = __webpack_require__(/*! ./Input */ \"./src/Input.ts\");\nconst Player_1 = __webpack_require__(/*! ./Player */ \"./src/Player.ts\");\nclass Game {\n    constructor() {\n        this.enemies = [];\n        this.entities = [];\n        this.state = \"title\";\n        this.timesHit = 0;\n        this.timeBeforePause = 400;\n        this.lastTimestamp = 0;\n        this.canvas = document.getElementById(\"canvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.player = new Player_1.Player();\n        // this.entities.push(this.player);\n        this.bounds = { x: 0, y: 0, width: this.canvas.width, height: this.canvas.height };\n        // this.spawn(new Boss());\n        Game.instance = this;\n    }\n    changeToPlaying() {\n        this.state = \"playing\";\n        this.entities = [];\n        this.spawn(this.player);\n        setInterval(() => {\n            let enemy = new Enemy_1.Enemy();\n            // enemy.x = Math.random() * this.canvas.width;\n            // enemy.y = Math.random() * this.canvas.height;\n            enemy.position = { x: Math.random() * this.canvas.width, y: Math.random() * this.canvas.height };\n            this.spawn(enemy);\n        }, 6000);\n        //i think using a interval here is funny\n    }\n    update(dt) {\n        switch (this.state) {\n            case \"title\":\n                if (Input_1.Input.instance.justPressed(\"fire\")) {\n                    this.changeToPlaying();\n                }\n                break;\n            case \"playing\":\n                if (dt > this.timeBeforePause) { //This might break if the game gets too laggy\n                    this.state = \"paused\";\n                    break;\n                }\n                for (let i = 0; i < this.entities.length; i++) {\n                    this.entities[i].update(dt);\n                }\n                break;\n            case \"paused\":\n                if (Input_1.Input.instance.justPressed(\"fire\")) {\n                    this.state = \"playing\";\n                }\n                break;\n        }\n        Input_1.Input.instance.update();\n    }\n    draw(ctx) {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.state == \"title\") {\n            ctx.fillStyle = \"black\";\n            ctx.font = \"30px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.fillText(\"Cirno's Advanced Math Class\", this.canvas.width / 2, this.canvas.height / 2);\n            ctx.fillText(\"WASD to move, space to shoot, shift to focus\", this.canvas.width / 2, this.canvas.height / 2 + 30);\n            ctx.fillText(\"Press space to start\", this.canvas.width / 2, this.canvas.height / 2 + 60);\n        }\n        for (let i = 0; i < this.entities.length; i++) {\n            this.entities[i].draw(this.ctx);\n        }\n        this.drawHitcount(ctx);\n        this.drawPauseScreen(ctx);\n    }\n    //hitcount is drawn at the top left\n    drawHitcount(ctx) {\n        ctx.fillStyle = \"black\";\n        ctx.font = \"30px Arial\";\n        ctx.textAlign = \"left\";\n        ctx.fillText(\"Times hit: \" + this.timesHit, 10, 30);\n    }\n    //frame rate is drawn at the top right\n    drawFramerate(ctx, dt) {\n        ctx.fillStyle = \"black\";\n        ctx.font = \"30px Arial\";\n        ctx.textAlign = \"left\";\n        ctx.fillText(\"FPS: \" + Math.round(1000 / dt), this.canvas.width - 120, 30);\n    }\n    drawPauseScreen(ctx) {\n        if (this.state == \"paused\") {\n            ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n            ctx.fillStyle = \"white\";\n            ctx.font = \"30px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.fillText(\"Paused\", this.canvas.width / 2, this.canvas.height / 2);\n        }\n    }\n    loop(timestamp) {\n        if (Game.instance.lastTimestamp == 0) {\n            Game.instance.lastTimestamp = timestamp;\n        }\n        let dt = timestamp - Game.instance.lastTimestamp;\n        Game.instance.lastTimestamp = timestamp;\n        this.update(dt);\n        this.draw(this.ctx);\n        this.drawFramerate(this.ctx, dt);\n        requestAnimationFrame(this.loop.bind(this));\n    }\n    spawn(entity) {\n        this.entities.push(entity);\n        if (entity instanceof Enemy_1.Enemy) {\n            this.enemies.push(entity);\n        }\n    }\n    remove(entity) {\n        let index = this.entities.indexOf(entity);\n        if (index > -1) {\n            this.entities.splice(index, 1);\n        }\n        if (entity instanceof Enemy_1.Enemy) {\n            index = this.enemies.indexOf(entity);\n            if (index > -1) {\n                this.enemies.splice(index, 1);\n            }\n        }\n    }\n}\nexports.Game = Game;\n\n\n//# sourceURL=webpack://touhoumath/./src/Game.ts?");

/***/ }),

/***/ "./src/Input.ts":
/*!**********************!*\
  !*** ./src/Input.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Input = exports.Actions = void 0;\nexports.Actions = [\"up\", \"down\", \"left\", \"right\", \"fire\", \"focus\"];\nclass Input {\n    constructor() {\n        this.mapping = {\n            \"KeyW\": \"up\",\n            \"ArrowUp\": \"up\",\n            \"KeyS\": \"down\",\n            \"ArrowDown\": \"down\",\n            \"KeyA\": \"left\",\n            \"ArrowLeft\": \"left\",\n            \"KeyD\": \"right\",\n            \"ArrowRight\": \"right\",\n            \"Space\": \"fire\",\n            \"KeyZ\": \"fire\",\n            \"ShiftLeft\": \"focus\",\n        };\n        Input.instance = this;\n        this.currentState = {};\n        this.previousState = {};\n        for (let action of exports.Actions) {\n            this.currentState[action] = false;\n            this.previousState[action] = false;\n        }\n        document.onkeydown = (e) => this.keyDown(e);\n        document.onkeyup = (e) => this.keyUp(e);\n    }\n    keyDown(e) {\n        let action = this.mapping[e.code];\n        if (action) {\n            this.currentState[action] = true;\n        }\n    }\n    keyUp(e) {\n        let action = this.mapping[e.code];\n        if (action) {\n            this.currentState[action] = false;\n        }\n    }\n    getState(action) {\n        return this.currentState[action];\n    }\n    justPressed(action) {\n        return this.currentState[action] && !this.previousState[action];\n    }\n    update() {\n        this.previousState = Object.assign({}, this.currentState);\n    }\n}\nexports.Input = Input;\n(() => {\n    new Input();\n})();\n\n\n//# sourceURL=webpack://touhoumath/./src/Input.ts?");

/***/ }),

/***/ "./src/Player.ts":
/*!***********************!*\
  !*** ./src/Player.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Player = void 0;\nconst BulletPath_1 = __webpack_require__(/*! ./BulletPath */ \"./src/BulletPath.ts\");\nconst Input_1 = __webpack_require__(/*! ./Input */ \"./src/Input.ts\");\nconst Game_1 = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\nconst Utils_1 = __webpack_require__(/*! ./Utils */ \"./src/Utils.ts\");\nconst Axis_1 = __webpack_require__(/*! ./Axis */ \"./src/Axis.ts\");\nconst Timer_1 = __webpack_require__(/*! ./Timer */ \"./src/Timer.ts\");\nclass Player {\n    get speed() {\n        return this.focusing ? this.focusSpeed : this.normalSpeed;\n    }\n    constructor() {\n        this.position = { x: 0, y: 0 };\n        this.width = 50;\n        this.height = 50;\n        this.color = \"red\";\n        this.normalSpeed = 0.25;\n        this.focusSpeed = 0.125;\n        this.timeBetweenShots = 1000;\n        this.hitboxRadius = 10;\n        this.hitboxColor = \"green\";\n        this.state = \"moving\";\n        this.focusing = false;\n        this.selectedPath = t => ({ x: t * Math.cos(t / 250) / 100, y: t * Math.sin(t / 250) / 100 }); //presetPaths.straight(0, 0, 0.5);\n        this.currentPath = null;\n        this.shotTimer = new Timer_1.Timer(this.timeBetweenShots, () => { }, false, false);\n    }\n    draw(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.fillRect(this.position.x - this.width / 2, this.position.y - this.height / 2, this.width, this.height);\n        //draw cooldown\n        if (this.shotTimer.active) {\n            ctx.fillStyle = \"blue\";\n            ctx.fillRect(this.position.x - this.width / 2, this.position.y - this.height / 2, this.width, this.height * this.shotTimer.percentComplete);\n        }\n        if (this.focusing) {\n            //draw hitbox\n            ctx.fillStyle = this.hitboxColor;\n            ctx.beginPath();\n            ctx.arc(this.position.x, this.position.y, this.hitboxRadius, 0, 2 * Math.PI);\n            ctx.fill();\n            ctx.closePath();\n            //draw path\n            (0, BulletPath_1.drawPath)(ctx, this.position, this.selectedPath, 10000, \"black\");\n            (0, Axis_1.drawAxis)(ctx, this.position.x, this.position.y, 1000, 50, 50, \"black\");\n        }\n    }\n    handleMove(dt) {\n        let change = { x: 0, y: 0 };\n        if (Input_1.Input.instance.getState(\"up\")) {\n            change.y -= this.speed * dt;\n        }\n        if (Input_1.Input.instance.getState(\"down\")) {\n            change.y += this.speed * dt;\n        }\n        if (Input_1.Input.instance.getState(\"left\")) {\n            change.x -= this.speed * dt;\n        }\n        if (Input_1.Input.instance.getState(\"right\")) {\n            change.x += this.speed * dt;\n        }\n        this.position = Utils_1.Vector.add(this.position, change);\n        this.checkBounds();\n    }\n    checkBounds() {\n        if (this.position.x - this.width / 2 < Game_1.Game.instance.bounds.x) {\n            this.position.x = Game_1.Game.instance.bounds.x + this.width / 2;\n        }\n        else if (this.position.x + this.width / 2 > Game_1.Game.instance.bounds.x + Game_1.Game.instance.bounds.width) {\n            this.position.x = Game_1.Game.instance.bounds.x + Game_1.Game.instance.bounds.width - this.width / 2;\n        }\n        if (this.position.y - this.height / 2 < Game_1.Game.instance.bounds.y) {\n            this.position.y = Game_1.Game.instance.bounds.y + this.height / 2;\n        }\n        else if (this.position.y + this.height / 2 > Game_1.Game.instance.bounds.y + Game_1.Game.instance.bounds.height) {\n            this.position.y = Game_1.Game.instance.bounds.y + Game_1.Game.instance.bounds.height - this.height / 2;\n        }\n    }\n    update(dt) {\n        this.focusing = Input_1.Input.instance.getState(\"focus\");\n        switch (this.state) {\n            case \"inactive\":\n                this.state = \"moving\";\n                break;\n            case \"moving\":\n                this.handleMove(dt);\n                if (Input_1.Input.instance.justPressed(\"fire\")) {\n                    this.fire();\n                }\n                this.shotTimer.update(dt);\n                break;\n            case \"firing\":\n                if (this.currentPath) {\n                    // this.currentPath.update(dt);\n                    if (this.currentPath.count == 0) {\n                        this.state = \"moving\";\n                        this.currentPath = null;\n                    }\n                }\n                break;\n        }\n    }\n    fire() {\n        if (this.shotTimer.active) {\n            return;\n        }\n        this.state = \"firing\";\n        this.shotTimer.start();\n        this.currentPath = new BulletPath_1.BulletPath(this.position, this.selectedPath, \"blue\", 5);\n        this.currentPath.timeToLive = 10000;\n        Game_1.Game.instance.spawn(this.currentPath);\n    }\n    collides(point) {\n        return Math.sqrt((point.x - this.position.x) ** 2 + (point.y - this.position.y) ** 2) < this.hitboxRadius;\n    }\n}\nexports.Player = Player;\n\n\n//# sourceURL=webpack://touhoumath/./src/Player.ts?");

/***/ }),

/***/ "./src/Timer.ts":
/*!**********************!*\
  !*** ./src/Timer.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timer = void 0;\nclass Timer {\n    constructor(totalTime, action, loop = false, active = true) {\n        this.active = true;\n        this.loop = false;\n        this.totalTime = totalTime;\n        this.currentTime = totalTime;\n        // this.onComplete = onComplete;\n        this.loop = loop;\n        this.onComplete = action;\n        this.active = active;\n    }\n    update(dt) {\n        if (!this.active)\n            return;\n        this.currentTime -= dt;\n        if (this.currentTime <= 0) {\n            this.onComplete();\n            if (this.loop) {\n                this.reset();\n            }\n            else {\n                this.active = false;\n            }\n        }\n    }\n    reset() {\n        this.currentTime = this.totalTime;\n    }\n    start() {\n        if (this.currentTime <= 0) {\n            this.currentTime = this.totalTime;\n        }\n        this.active = true;\n    }\n    get percentComplete() {\n        return this.currentTime / this.totalTime;\n    }\n}\nexports.Timer = Timer;\n\n\n//# sourceURL=webpack://touhoumath/./src/Timer.ts?");

/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.lerpPoint = exports.lerp = exports.Vector = void 0;\nexports.Vector = {\n    add: (a, b) => ({ x: a.x + b.x, y: a.y + b.y }),\n    subtract: (a, b) => ({ x: a.x - b.x, y: a.y - b.y }),\n    scale: (a, s) => ({ x: a.x * s, y: a.y * s }),\n    magnitude: (a) => Math.sqrt(a.x * a.x + a.y * a.y),\n    magnitudeSquared: (a) => a.x * a.x + a.y * a.y,\n    distance: (a, b) => exports.Vector.magnitude(exports.Vector.subtract(a, b)),\n    distanceSquared: (a, b) => exports.Vector.magnitudeSquared(exports.Vector.subtract(a, b)),\n};\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\nexports.lerp = lerp;\nfunction lerpPoint(a, b, t) {\n    return { x: lerp(a.x, b.x, t), y: lerp(a.y, b.y, t) };\n}\nexports.lerpPoint = lerpPoint;\n\n\n//# sourceURL=webpack://touhoumath/./src/Utils.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.presetPaths = void 0;\nconst Game_1 = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\nexports.presetPaths = {\n    straight: (x, y, speed) => {\n        return (t) => ({ x: t * speed, y: 0 });\n    },\n    sin: (x, y, speed) => {\n        return (t) => ({ x: t * speed, y: Math.sin(t * speed * Math.PI / 180) * 50 });\n    },\n    cos: (x, y, speed) => {\n        return (t) => ({ x: t * speed, y: Math.cos(t * speed * Math.PI / 180) * 50 });\n    },\n};\nconst body = document.querySelector(\"body\");\nlet parametricButton = document.getElementById(\"parametric\");\nlet functionBox = document.getElementById(\"function\");\nlet xfunctionBox = document.getElementById(\"xFunction\");\nlet yfunctionBox = document.getElementById(\"yFunction\");\nlet confirmButton = document.getElementById(\"loadFunction\");\nlet standardDiv = document.getElementById(\"standard\");\nlet parametricDiv = document.getElementById(\"param\");\n//obviously doesn't check every value, but it checks the common ones\nfunction safteyCheck(func) {\n    try {\n        func(1); //standard check\n        func(0); //stops log\n        func(0.5); //functions with natural domain\n        func(-1); //stops sqrt\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nconfirmButton.addEventListener(\"click\", () => {\n    if (parametricButton.checked) {\n        let xfunc = new Function(\"t\", \"return \" + xfunctionBox.value);\n        let yfunc = new Function(\"t\", \"return \" + yfunctionBox.value);\n        if (!safteyCheck(xfunc) || !safteyCheck(yfunc)) {\n            alert(\"The functions must only be in terms of t and use valid JavaScript syntax\");\n            return;\n        }\n        game.player.selectedPath = t => ({ x: xfunc(t / 3), y: -yfunc(t / 3) });\n    }\n    else {\n        let func = new Function(\"x\", \"return \" + functionBox.value);\n        if (!safteyCheck(func)) {\n            alert(\"The function must be in terms of x and use valid JavaScript syntax\");\n            return;\n        }\n        game.player.selectedPath = t => ({ x: t / 3, y: -func(t / 3) });\n    }\n    console.log(\"loaded\");\n    console.log(game.player.selectedPath);\n});\nfunction blurOnDone(element) {\n    element.addEventListener(\"keydown\", (e) => {\n        if (e.key == \"Enter\") {\n            confirmButton.click();\n            e.preventDefault();\n            element.blur();\n        }\n    });\n}\nblurOnDone(functionBox);\nblurOnDone(xfunctionBox);\nblurOnDone(yfunctionBox);\nparametricButton.addEventListener(\"click\", () => {\n    if (parametricButton.checked) {\n        standardDiv.hidden = true;\n        parametricDiv.hidden = false;\n    }\n    else {\n        standardDiv.hidden = false;\n        parametricDiv.hidden = true;\n    }\n});\nlet game = new Game_1.Game();\nwindow.requestAnimationFrame(Game_1.Game.instance.loop.bind(Game_1.Game.instance));\n\n\n//# sourceURL=webpack://touhoumath/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;